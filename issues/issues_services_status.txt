[Feature] Implement AMS-1 Dashboard Wireframes & React Skeleton
Description: Produce low-fidelity wireframes for the status board (traffic-light tiles + detail drawer) and commit a bare-bones React page that renders mock data from mock/status.json, updating every 30 s.
Acceptance: Wireframes (PNG/PDF) are reviewed and approved. Running npm start displays a responsive dashboard grid; ESLint passes with no errors.
Labels: design, frontend
________________________________________
[Feature] Implement AMS-2 Health-Check Script v0
Description: Write a Python (or Node) script that pings each URL in services.json once per minute and appends {service, latency_ms, status} rows to a local SQLite file for quick testing.
Acceptance: Unit test faking one up and one down endpoint inserts correct rows; python check.py runs three cycles without crash.
Labels: backend, integration
________________________________________
[Task] Implement AMS-3 Postgres Schema
Description: Switch storage from SQLite to Postgres. Create tables services, service_checks, alerts, logs_raw; seed services from JSON and add indices on (service_id, created_at).
Acceptance: make migrate recreates schema; psql shows the four tables and indices; sample insert and select succeed.
Labels: data
________________________________________
[Feature] Implement AMS-4 Status API & Frontend Integration
Description: Add /api/status route that returns the latest check per service with computed color code (green/yellow/red). Replace mock polling in React with real API calls every 30 s.
Acceptance: curl /api/status returns JSON array with color field; dashboard card flips red within 30 s when a service is manually set to fail and back to green on recovery.
Labels: backend, frontend, integration
________________________________________
[Feature] Implement AMS-5 Line & Email Alert Notifier
Description: When a service remains red for â‰¥ 5 min, push a Line Notify message and send an email via SMTP; record one row in alerts to prevent duplicate notifications.
Acceptance: Demo script toggling a service to red triggers exactly one Line message and one email; a repeated red event within 5 min sends no additional alerts.
Labels: alerting, backend