________________________________________
1.	[Task] Set Up FastAPI Bottle-Detection Service
Description:
Create the initial FastAPI micro-service that loads bottle-detection / classification models and exposes a health endpoint.
Acceptance Criteria:
• /healthz returns {"status":"ok"} (HTTP 200)
• Model weights load once on startup (≤ 3 s) and are cached per request lifecycle
• Docker image builds and starts with docker compose up
Labels: backend, api, models
________________________________________
2.	[Task] Add Production-Date Endpoint (≤ 120 Days Check)
Description:
Implement /api/v1/mfg-date that extracts the bottle’s manufacturing date via OCR and decides eligibility (≤ 120 days from today).
Acceptance Criteria:
• Endpoint accepts one image / video (multipart/form-data)
• Response JSON contains mfg_date, eligible, confidence
• Unit tests cover valid, expired, and unreadable dates (≥ 90 % accuracy on sample set)
Labels: backend, api, ocr
________________________________________
3.	[Task] Add Claimability Endpoint for Images / Video
Description:
Expose /api/v1/claimability that takes up to 10 images or one video, runs the v3 prompt, and returns structured claim results.
Acceptance Criteria:
• Endpoint enforces brand gate (Chang / ช้าง) and per-part ≥ 80 % rule
• Returns english and thai fields plus part-by-part integrity in JSON
• Integration test passes for known claimable and unclaimable samples (latency < 15 s)
Labels: backend, api, ai
________________________________________
4.	[Task] Refactor Codebase into Modular Service Layers
Description:
Restructure backend project into api/, services/, schemas/, core/, and add Pydantic-settings config, logging, and tests.
Acceptance Criteria:
• No circular imports; mypy and ruff pass
• All existing endpoints continue to function after refactor
• README updated with new structure and dev setup steps
Labels: refactor, tech-debt
________________________________________
5.	[Task] Redesign Front-End in React + Tailwind
Description:
Replace current static HTML with a responsive React (Vite + TS) UI using Tailwind and shadcn/ui for components.
Acceptance Criteria:
• Pages: Upload, Results, (optional) History Drawer implemented
• Axios hooks connect to new FastAPI endpoints; loading states animated with Framer Motion
• Lighthouse scores ≥ 90 Performance and ≥ 95 Accessibility on mobile & desktop
Labels: frontend, ui, react
________________________________________
